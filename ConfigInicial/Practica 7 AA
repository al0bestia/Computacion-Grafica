/*
======================================================
Alcalá Briseño Martha Alondra
Práctica 7 - Computación Gráfica
10/10/25
319300602
======================================================
*/

#include <iostream>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include "Shader.h"
#include "Camera.h"

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

// === Prototipos ===
void KeyCallback(GLFWwindow*, int, int, int, int);
void MouseCallback(GLFWwindow*, double, double);
void DoMovement();

// === Globals ===
const GLuint WIDTH = 800, HEIGHT = 600;
int SCREEN_WIDTH, SCREEN_HEIGHT;

Camera camera(glm::vec3(0.0f, 0.0f, 3.0f));
float lastX = WIDTH / 2.0f, lastY = HEIGHT / 2.0f;
bool keys[1024]{};
bool firstMouse = true;
float deltaTime = 0.0f, lastFrame = 0.0f;

int main() {
    // GLFW
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif
    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "Practica 7 AA", nullptr, nullptr);
    if (!window) { std::cout << "Failed to create window\n"; return -1; }
    glfwMakeContextCurrent(window);
    glfwGetFramebufferSize(window, &SCREEN_WIDTH, &SCREEN_HEIGHT);
    glfwSetKeyCallback(window, KeyCallback);
    glfwSetCursorPosCallback(window, MouseCallback);
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    // GLEW
    glewExperimental = GL_TRUE;
    if (glewInit() != GLEW_OK) { std::cout << "Failed to init GLEW\n"; return -1; }

    glViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
    glEnable(GL_DEPTH_TEST);

    Shader shader("Shader/lamp.vs", "Shader/lamp.frag");

// ===== VÉRTICES DEL CUBO =====
// posición (x, y, z), Color (r, g, b), Coordenadas de textura (u, v)
// cada cara del cubo usa una parte diferente de la imagen
// valores de U y V (0.0 a 1.0) indican la zona que ocupa cada cara

    GLfloat vertices[] = {

        // ---------- CARA FRONTAL ROJA  ----------
        // cara que mira hacia el frente (cara inicial)
        -0.5f,-0.5f,+0.5f,   1,1,1,   0.25f,0.3333f,   
         0.5f,-0.5f,+0.5f,   1,1,1,   0.50f,0.3333f,   
         0.5f, 0.5f,+0.5f,   1,1,1,   0.50f,0.6667f,   
         0.5f, 0.5f,+0.5f,   1,1,1,   0.50f,0.6667f,
        -0.5f, 0.5f,+0.5f,   1,1,1,   0.25f,0.6667f,   
        -0.5f,-0.5f,+0.5f,   1,1,1,   0.25f,0.3333f,

        // ---------- CARA TRASERA NARANJA --------
        // lado opuesto a la cara frontal
        -0.5f,-0.5f,-0.5f,   1,1,1,   1.00f,0.3333f,   
        -0.5f, 0.5f,-0.5f,   1,1,1,   1.00f,0.6667f,   
         0.5f, 0.5f,-0.5f,   1,1,1,   0.75f,0.6667f,   
         0.5f, 0.5f,-0.5f,   1,1,1,   0.75f,0.6667f,
         0.5f,-0.5f,-0.5f,   1,1,1,   0.75f,0.3333f,  
        -0.5f,-0.5f,-0.5f,   1,1,1,   1.00f,0.3333f,

        // ---------- CARA DERECHA AZUL  ----------
        // lado derecho del cubo 
         0.5f,-0.5f,+0.5f,   1,1,1,   0.50f,0.3333f,  
         0.5f,-0.5f,-0.5f,   1,1,1,   0.75f,0.3333f,   
         0.5f, 0.5f,-0.5f,   1,1,1,   0.75f,0.6667f,   
         0.5f, 0.5f,-0.5f,   1,1,1,   0.75f,0.6667f,
         0.5f, 0.5f,+0.5f,   1,1,1,   0.50f,0.6667f,   
         0.5f,-0.5f,+0.5f,   1,1,1,   0.50f,0.3333f,

         // ---------- CARA IZQUIERDA VERDE ----------
         // lado izquierdo del cubo 
         -0.5f,-0.5f,+0.5f,   1,1,1,   0.00f,0.3333f,   
         -0.5f, 0.5f,+0.5f,   1,1,1,   0.00f,0.6667f,  
         -0.5f, 0.5f,-0.5f,   1,1,1,   0.25f,0.6667f,   
         -0.5f, 0.5f,-0.5f,   1,1,1,   0.25f,0.6667f,
         -0.5f,-0.5f,-0.5f,   1,1,1,   0.25f,0.3333f,   
         -0.5f,-0.5f,+0.5f,   1,1,1,   0.00f,0.3333f,

         // ---------- CARA SUPERIOR BLANCA  ----------
         // parte de arriba del cubo 
         -0.5f, 0.5f,+0.5f,   1,1,1,   0.25f,0.3333f,   
          0.5f, 0.5f,+0.5f,   1,1,1,   0.50f,0.3333f,   
          0.5f, 0.5f,-0.5f,   1,1,1,   0.50f,0.0000f,  
          0.5f, 0.5f,-0.5f,   1,1,1,   0.50f,0.0000f,
         -0.5f, 0.5f,-0.5f,   1,1,1,   0.25f,0.0000f,   
         -0.5f, 0.5f,+0.5f,   1,1,1,   0.25f,0.3333f,

         // ---------- CARA INFERIOR AMARRILLA  ----------
         // parte de abajo del cubo 
         -0.5f,-0.5f,+0.5f,   1,1,1,   0.25f,0.6667f,  
         -0.5f,-0.5f,-0.5f,   1,1,1,   0.25f,1.0000f, 
          0.5f,-0.5f,-0.5f,   1,1,1,   0.50f,1.0000f,   
          0.5f,-0.5f,-0.5f,   1,1,1,   0.50f,1.0000f,
          0.5f,-0.5f,+0.5f,   1,1,1,   0.50f,0.6667f,   
         -0.5f,-0.5f,+0.5f,   1,1,1,   0.25f,0.6667f,
    };


    GLuint VAO, VBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    // pos / color / uv  (stride = 8 floats)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glEnableVertexAttribArray(2);
    glBindVertexArray(0);

    GLuint atlas;
    glGenTextures(1, &atlas);
    glBindTexture(GL_TEXTURE_2D, atlas);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    int w, h, c;
    stbi_set_flip_vertically_on_load(true); 
    // CRGA DE TEXTURA
    unsigned char* data = stbi_load("Models/rubik.jpg", &w, &h, &c, 0);
    if (!data) std::cout << "Failed to load texture (Models/rubik.jpg)\n";
    else {
        GLenum fmt = (c == 4) ? GL_RGBA : (c == 3) ? GL_RGB : GL_RED; 
        glTexImage2D(GL_TEXTURE_2D, 0, fmt, w, h, 0, fmt, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);
        stbi_image_free(data);
    }

    shader.Use();
    glUniform1i(glGetUniformLocation(shader.Program, "uTex"), 0);

    while (!glfwWindowShouldClose(window)) {
        float now = (float)glfwGetTime();
        deltaTime = now - lastFrame; lastFrame = now;

        glfwPollEvents(); DoMovement();

        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        shader.Use();
        glm::mat4 view = camera.GetViewMatrix();
        glm::mat4 proj = glm::perspective(glm::radians(camera.GetZoom()),
            (float)SCREEN_WIDTH / (float)SCREEN_HEIGHT, 0.1f, 100.0f);
        glm::mat4 model(1.0f);
        GLint mLoc = glGetUniformLocation(shader.Program, "model");
        GLint vLoc = glGetUniformLocation(shader.Program, "view");
        GLint pLoc = glGetUniformLocation(shader.Program, "projection");
        glUniformMatrix4fv(mLoc, 1, GL_FALSE, glm::value_ptr(model));
        glUniformMatrix4fv(vLoc, 1, GL_FALSE, glm::value_ptr(view));
        glUniformMatrix4fv(pLoc, 1, GL_FALSE, glm::value_ptr(proj));

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, atlas);

        glBindVertexArray(VAO);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);

        glfwSwapBuffers(window);
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glfwTerminate();
    return 0;
}

void DoMovement() {
    if (keys[GLFW_KEY_W] || keys[GLFW_KEY_UP])    camera.ProcessKeyboard(FORWARD, deltaTime);
    if (keys[GLFW_KEY_S] || keys[GLFW_KEY_DOWN])  camera.ProcessKeyboard(BACKWARD, deltaTime);
    if (keys[GLFW_KEY_A] || keys[GLFW_KEY_LEFT])  camera.ProcessKeyboard(LEFT, deltaTime);
    if (keys[GLFW_KEY_D] || keys[GLFW_KEY_RIGHT]) camera.ProcessKeyboard(RIGHT, deltaTime);
}
void KeyCallback(GLFWwindow* w, int key, int sc, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) glfwSetWindowShouldClose(w, GL_TRUE);
    if (key >= 0 && key < 1024) {
        if (action == GLFW_PRESS) keys[key] = true;
        else if (action == GLFW_RELEASE) keys[key] = false;
    }
}
void MouseCallback(GLFWwindow*, double x, double y) {
    if (firstMouse) { lastX = (float)x; lastY = (float)y; firstMouse = false; }
    float xoff = (float)x - lastX, yoff = lastY - (float)y; lastX = (float)x; lastY = (float)y;
    camera.ProcessMouseMovement(xoff, yoff);
}
